" To debug mappings, type :verbose map <mapping>

" marker starts with " <section name> {{{ and finishes with  }}}
"set foldmethod=marker
set nocompatible               " be iMproved
"
" vim specific codes
if !has('nvim')
    " terminal codes are ignored by neovim
    " https://github.com/neovim/neovim/issues/2330
    set t_Co=256                        " use 256 colors
endif

set viminfo='100,f1

set splitbelow	" on horizontal splits
set splitright   " on vertical split
set autoread " automatically reload file when it has been changed
set linebreak " better display
filetype on                   " required!
set backspace=indent,eol,start

set tabstop=4 " a tab takes 4 characters (local to buffer)
set shiftwidth=4 " Number of spaces to use per step of (auto)indent.

" start scrolling before reaching end of screen in order to keep more context
set scrolloff=3

"  compilation option
set smartindent 

set noshowmode " hide the default mode text
set smarttab "use shiftwidth
set showmode " Show the current mode

set cursorline " highlight cursor line
" Netrw configuration {{{
" decide with which program to open files when typing 'gx'
let g:netrw_browsex_viewer="xdg-open"
let g:netrw_home=$XDG_CACHE_HOME.'/vim'
let g:netrw_liststyle=1 " long listing with timestamp
" }}}
" /quickfix
"
"let c_no_bracket_error=1
"let c_no_curly_error=1
"let c_comment_strings=1
"let c_gnu=1

set title " vim will change terminal title
" look at :h titlestring

let mapleader = " "


nnoremap <Leader>/ :set hlsearch! hls?<CR> " toggle search highlighting

" search for  item in quickfix list
nnoremap <F2> :cp<CR>
nnoremap <F3> :cn<CR>



" transforms some characters into their digraphs equivalent 
" if your font supports it 
" concealcursor
let g:tex_conceal="agdms"
set conceallevel=2

set showmatch

" set autochdir
" 
" " When on, Vim will change the current working directory
" " whenever you open a file, switch buffers, delete a buffer
" " or open/close a window.
" " It will change to the directory containing the file which
" " was opened or selected.
" " Note: When this option is on some plugins may not work.

scriptencoding utf-8
" allow to use fancy caracters
if &termencoding == ""
	let &termencoding = &encoding
endif
set encoding=utf-8
setglobal fileencoding=utf-8

" display a menu when need t ocomplete a command 
set wildmenu
set wildmode=list:longest
"Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif


" Use visual bell instead of beeping when doing something wrong
set visualbell

" Display line numbers on the left
set number
" TODO do a macro that cycles throught show/hide absolute/relative line numbers
map <C-N><C-N> :set invnumber<CR>
"Prefer relative line numbering?
"set relativenumber"


" Display unprintable characters with '^' and
" set nolist to disable or set list!


set timeoutlen=400 " Quick timeouts on key combinations.



" in order to scroll faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Regenerate database
" map 
"map <esc>[27;5;9~ <C-Tab>
"map <esc>[1;5A <C-Up>
"map <esc>[1;5B <C-Down>
"map <esc>[1;5C <C-Right>
"map <esc>[1;5D <C-Left>
"map <esc>[1;2D <S-Left>
"map <esc>[1;2C <S-Right>
"" tabn 4. Createon
"map <esc>[27;5;38~ <C-&>
"map <esc>[27;5;130~ <C-Ã©>
"map <esc>[27;5;39~ <C-'>
"map <esc>[27;5;34~ <C-">
"map <esc>[27;5;40~ <C-(>
"

syntax on

" set undodir=~/.vim/tmp/undo//     " undo files
" set backupdir=~/.vim/tmp/backup// " backups
" set directory=~/.vim/tmp/swap//   " swap files

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}

" to load plugins in ftplugin matching ftdetect
filetype plugin on

" Modeline shortcuts 
set modeline
set modelines=4
nmap <leader>ml :Modeliner<Enter>

" X clipboard gets aliased to +
set clipboard=unnamedplus
" copy to external clipboard
noremap gp "+p 
noremap gy "+y 

" Easy window navigation
" noremap <F3> :Tlist<Enter>


" est mappe a autre chose pour l'instant
noremap <F4> exec ":emenu <tab>"


" should become useless with neovim
noremap <F10> :set paste!<CR>


" todo enable rainbow parentheses
"nnoremap <leader>R :CtrlP<CR>
" est deja mappe :/




" Plug section {{{

" let use sudo once the file is loaded
" source ~/.vim/insert_mode
source ~/.vim/display.vim
" source ~/.vim/colors.vim
source ~/.vim/plug.vim
source ~/.vim/cscope.vim
source ~/.vim/splits.vim
source ~/.vim/vim_file_chooser.vim
source ~/.vim/plug.vim
" }}}

"cmap w!! w !sudo tee % >/dev/null


set background=dark

let g:solarized_termtrans = 0
" let g:solarized_style     =   "dark"  
" g:solarized_contrast  =   "normal"|   "high" or "low"

" to alternate between dark and light bg
" to alternate between dark and light bg
"function! ToggleBackground()
 "if (w:solarized_style=="dark")
 "let w:solarized_style="light"
 "colorscheme solarized
"else
 "let w:solarized_style="dark"
 "colorscheme solarized
"endif
"endfunction
"command! Togbg call ToggleBackground()
"nnoremap <f4> :call ToggleBackground()<cr>

" colorscheme solarized
colorscheme monokai

" to remove timeout when changing modes
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif


nnoremap <leader>r :!%:p<return>


set shiftround    " round indent to multiple of 'shiftwidth'

" auto reload vimrc on save
au! BufWritePost .vimrc source %
" open vimrc
nnoremap <Leader>ev :vs $MYVIMRC<CR> 
nnoremap <Leader>ep :vs ~/.vim/plug.vim<CR> 
nnoremap <Leader>sv :source $MYVIMRC<CR> " reload vimrc

nnoremap <Leader>e :Vex<CR> " open netrw
nnoremap <Leader>w :w<CR>
nnoremap <Leader>o :CtrlP<CR>
nnoremap <leader>p :CtrlP<CR>
nnoremap <leader>u :Gundo<CR>

nnoremap <F8> :vertical wincmd f<CR> " open file under cursor in a split
nnoremap <leader>gfs :vertical wincmd f<CR> " open file under cursor in a split
" Powerline config {{{

let g:Powerline_symbols = "fancy" " to use unicode symbols
" }}}

" Startify config {{{
let g:startify_list_order = ['sessions','files', 'dir', 'bookmarks']
let g:startify_session_dir = $XDG_DATA_HOME.'/.vim/session'
let g:startify_bookmarks = [ '~/.vimrc' ]
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1
let g:startify_change_to_vcs_root = 0
let g:startify_session_savevars = []
" }}}

" Ctrpl config {{{
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_match_window = 'results:100' " overcome limit imposed by max height
let g:ctrlp_extensions= ['dir','mark']
" }}}

" Search parameters {{{
set nohlsearch " highlight search terms
set incsearch " show search matches as you type
set ignorecase " ignore case when searching
" set smartcase " to check
" }}}

" YouCompleteMe config {{{
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" g:ycm_show_diagnostics_ui=1
"let g:ycm_server_use_vim_stdout = 1
let g:ycm_server_log_level = 'debug'

nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F6> :YcmDebugInfo<CR>

"You may also want to map the subcommands to something less verbose; for instance, nnoremap <leader>jd :YcmCompleter GoTo<CR> maps the <leader>jd sequence to the longer subcommand invocation.

"The various GoTo* subcommands add entries to Vim's jumplist so you can use CTRL-O to jump back to where you where before invoking the command (and CTRL-I to jump forward; see :h jumplist for details).

nnoremap <leader>jd :YcmCompleter GoTo<CR>
" }}}

" Jedi (python) completion {{{
let g:jedi#auto_vim_configuration = 0 " to prevent python's help popup
" }}}

" Airline {{{
let g:airline_powerline_fonts = 0
let g:airline_left_sep = '>'
let g:airline_right_sep = '<'
let g:airline_section = '|'
"let g:airline_theme = 'solarized'
"}}}
autocmd CompleteDone * pclose " close the popup on python completion

" Tex configuration {{{
" See :help ft-tex-plugin
let g:tex_flavor = "latex"
"}}}
"
" Put this in vimrc, add custom commands in the function.
function! FocusLost_SaveFiles()
  exe ":au FocusLost" expand("%") ":wa"
endfunction

nnoremap <F3> :Neomake<CR>
nnoremap <F4> :call FocusLost_SaveFiles()
let g:gitgutter_enabled = 0
" vim:foldmethod=marker:foldlevel=0
