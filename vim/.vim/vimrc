set nocompatible               " be iMproved
set splitbelow	" on horizontal splits
set splitright   " on vertical split
set autoread " automatically reload file when it has been changed
set linebreak " better display
filetype on                   " required!
set t_Co=256			" use 256 colors
set backspace=indent,eol,start

set smarttab "use shiftwidth
set incsearch " start searching straightaway
set showmode " Show the current mode

" let mapleader = ","
let mapleader = " "
nnoremap <Leader>v :e $MYVIMRC<CR> " open vimrc
nnoremap <Leader>R :source $MYVIMRC<CR> " open vimrc


nnoremap <Leader>/ :set hlsearch! hls?<CR> " toggle search highlighting


set showmatch

" set autochdir
" 
" " When on, Vim will change the current working directory
" " whenever you open a file, switch buffers, delete a buffer
" " or open/close a window.
" " It will change to the directory containing the file which
" " was opened or selected.
" " Note: When this option is on some plugins may not work.

scriptencoding utf-8
" allow to use fancy caracters
set encoding=utf-8

" display a menu when need t ocomplete a command 
set wildmenu
set wildmode=list:longest
"Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif


" Use visual bell instead of beeping when doing something wrong
set visualbell

" enable mouse to click on tabs etc... 
" set mouse=a
set ttymouse=urxvt
" Display line numbers on the left
" set number


" TODO do a macro that cycles throught show/hide absolute/relative line numbers
map <C-N><C-N> :set invnumber<CR>
"Prefer relative line numbering?
"set relativenumber"


" Display unprintable characters with '^' and
" set nolist to disable or set list!


" Quick timeouts on key combinations.
set timeoutlen=400

" - boolean (default off), local to buffer


" Hide the default mode text (e.g. -- INSERT -- below the statusline)
" set noshowmode




" TODO 
"augroup Python
	"au!
"augroup END
" in order to scroll faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Regenerate database
" map 
map <esc>[27;5;9~ <C-Tab>
map <esc>[1;5A <C-Up>
map <esc>[1;5B <C-Down>
map <esc>[1;5C <C-Right>
map <esc>[1;5D <C-Left>
map <esc>[1;2D <S-Left>
map <esc>[1;2C <S-Right>
" tabn 4. Createon
map <esc>[27;5;38~ <C-&>
map <esc>[27;5;130~ <C-é>
map <esc>[27;5;39~ <C-'>
map <esc>[27;5;34~ <C-">
map <esc>[27;5;40~ <C-(>
"

syntax on

" set undodir=~/.vim/tmp/undo//     " undo files
" set backupdir=~/.vim/tmp/backup// " backups
" set directory=~/.vim/tmp/swap//   " swap files

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes
set wildignore+=lib

" }}}

" to load plugins in ftplugin matching ftdetect
filetype plugin on

" Modeline shortcuts 
set modeline
set modelines=4
nmap <leader>ml :Modeliner<Enter>

" Tab shortcuts
"let tableader = "t" 
"execute "nmap <unique> ". g:tableader.g:tableader." :tabnew<Enter>"
"nmap <leader>t :tabnew<Enter>
"nmap <leader><S-t> :tabclose<Enter>

" nmap <C-Left> <C-&>

" nmap <C-Enter> :vs<Enter>
" map <C-Left> gT
nmap <tab> :tabn<Enter>
nmap <C-Right> :tabn<Enter>
nmap <C-Left> :tabN<Enter>

nmap <C-Tab> :tabN<Enter>
nmap <C-&> :tabn1<Enter>
nmap <C-é> :tabn2<Enter>
nmap <C-"> :tabn3<Enter>
nmap <C-'> :tabn4<Enter>


" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so! $MYVIMRC<CR>
"
"
" Easy window navigation

" Nerdtree shortcuts
noremap <F2> :NERDTreeToggle<Enter>
let Tlist_Use_Right_Window   = 1
noremap <F3> :Tlist<Enter>


noremap <F4> exec ":emenu <tab>"

" Hide/display invisible characters
noremap <F11> :set list!<CR>
noremap <F10> :set paste!<CR>

"source $HOME/.vim/test_tab.vim

" A stands for Alt
" nnoremap <C-h> :call MoveToTab(2)<CR>
" nnoremap <C-l> :call MoveToTab(1)<CR>


" map <F2> :echo 'Current time is ' . strftime('%c')<CR>
" map! <F3> a<C-R>=strftime('%c')<CR><Esc>

" let use sudo once the file is loaded
" source ~/.vim/insert_mode
source ~/.vim/display.vim
" source ~/.vim/colors.vim
source ~/.vim/search.vim
" source ~/.vim/vundle.vim
source ~/.vim/plug.vim
source ~/.vim/compose.vim
source ~/.vim/powerline.vim
source ~/.vim/cscope.vim
source ~/.vim/ycm.vim
source ~/.vim/splits.vim
source ~/.vim/vim_file_chooser.vim
source ~/.vim/plug.vim
cmap w!! w !sudo tee % >/dev/null


set background=dark
let g:airline_powerline_fonts = 1

let g:solarized_termtrans = 0
" let g:solarized_style     =   "dark"  
" g:solarized_contrast  =   "normal"|   "high" or "low"

" to alternate between dark and light bg
" to alternate between dark and light bg
function! ToggleBackground()
 if (w:solarized_style=="dark")
 let w:solarized_style="light"
 colorscheme solarized
else
 let w:solarized_style="dark"
 colorscheme solarized
endif
endfunction

colorscheme solarized

" to remove timeout when changing modes
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif


nnoremap <leader>r :!%:p<return>

command! Togbg call ToggleBackground()
nnoremap <f4> :call ToggleBackground()<cr>

set shiftround    " round indent to multiple of 'shiftwidth'

" auto reload vimrc on save
au! BufWritePost .vimrc source %
