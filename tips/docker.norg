
* reference 

https://docs.docker.com/engine/reference/builder/#from
Each FROM instruction clears any state created by previous instructions

when updating this, fill the nix store on the runners by running the following:
  # nix build github:nixos/nix/VERSION --out-link ./dont-remove#
* Registry
 ** push image to registry 
@code shell
docker load -i tarball / docker import
docker tag old new
docker push (make sure to be logged in, else docker login)
	@end

# -v host-dir:container-dir
docker run -v "/nix:/nix" -v "/nix/var/nix/daemon-socket/socket:/nix/var/nix/daemon-socket/socket" -it tetho/nix:test2 sh

# to start a docker
docker run mattator/dce-dockerfiles:latest 
add --name NAME to give it a memorable name:
docker run --name NAME mattator/dce-dockerfiles:latest 


To override the entrypoint !
docker run --entrypoint bash -it 885c3cd03b4d643999dca2db0e4e2fefe533f4689864c5d022bc077c75e22aa0

docker run -it myRegistry.net/jinko-platform/jinko-base:local bash 

** how to free space / remove images
@code shell
docker system prune -af --volumes
docker image prune -a
docker rmi -f $(docker images -q)
   @end

One can use `-e "foo=bar"` to pass additionnal variables.

Pour lister les images et leur nom
docker ps

%% docker container ls

# kill all containers

docker kill $(docker ps -q)


# start the container + get a prompt 

docker exec -it <container name> /bin/bash
(the image must be running)

* secure configuration

  Use docker-credentials-pass ("docker-credential-helpers" in nixpkgs) pour eviter d'avoir le mdp en clair dans $HOME/.docker/config.json

docker ps --no-trunc

Quand le service keeps restarting, look at `docker logs`

docker logs --tail 50 --follow --timestamps jinko_result-store-external_1

docker network ls

docker attach jinko_frontend_1

--sig-proxy

docker inspect jinko_result-store_1

https://docs.docker.com/compose/compose-file/#ports



To use the bridge network use network_mode: https://docs.docker.com/compose/compose-file/#network-mode

Compose relies on network scoped aliases, so if you try to use bridge as an external network it will set those aliases. If you use network_mode, it will disable the built-in aliases, and rely on the aliases made available by the bridge network.

# lister les images locales
docker images -a

pour ensuite les regarder:
`docker image inspect hash`

`docker network connect bridge [container]`
to join the default network that way.

$ docker network rm host / bridge / none
Error response from daemon: host is a pre-defined network and cannot be removed

 ** Docker-compose
*** How to rebuild and restart a single container ?

    Remove the -d to see logs
    `docker-compose up -d --build worker`

* How to stop a single container ?

$ docker-compose rm -f -s -v result-store

* use a preexisting network

https://docs.docker.com/compose/networking/#use-a-pre-existing-network

docker network create

https://www.reddit.com/r/docker/comments/8wlggo/dockercompose_not_picking_up_the_existing_network/
networks:
  external: true
  name: dtaone_net

# to show ocnf
docker-compose config

Well you could use network_mode property in the service. This is mutually exclusive with the networks property though. If you use the network_mode: "host" your service has access to the test network, without explicitly joining.

https://docs.docker.com/compose/environment-variables/#the-env-file
compose > shell environment > .env file > dockerfile > undefined

# Networking
In host mode the container does not get its own IP-address allocated. 
Similarly port mapping is disabled.

# building
docker build --progress=plain -t abc:1 . --no-cache

* To debug

 docker inspect --format "{{json .State.Health }}" f6c181a5692e | jq


docker build --progress auto .

--build-arg  arg=value https://docs.docker.com/engine/reference/builder/#arg
docker build --progress auto --no-cache - < Dockerfile

docker [[build]] --progress auto --no-cache --build-arg JINKO_VERSION=local  -f Dockerfile


The docker build command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified PATH or URL. The build process can refer to any of the files in the context. For example, your build can use a COPY instruction to reference a file in the context.
