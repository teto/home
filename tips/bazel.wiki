`load` statements must be at the top

--announce_rc prints the flags that are being applied from bazelrc files and the command line

`bazel help info-keys`


    BUILD_WORKSPACE_DIRECTORY: the root of the workspace where the build was run.
    BUILD_WORKING_DIRECTORY: the current working directory where Bazel was run from.

Output directories
https://docs.bazel.build/versions/main/output_directories.html

https://docs.bazel.build/versions/main/user-manual.html#run

https://docs.bazel.build/versions/main/be/make-variables.html#predefined_label_variables
bazel info --show_make_env 
bazel build --define=VERSION=1.0.0 
https://github.com/bazelbuild/rules_docker#stamping use workspace_status
stable_status
One can't access things from external WORKSPACE(s).

bazel info --show_make_env
bazel build @ghcide-exe//hie-bios

bazel help query

[query](https://docs.bazel.build/versions/master/query-how-to.html)

`bazel --explain ./explain.txt` ... to see the issue

nixpkgs_package vient de haskell_rules
nix_package est un wrapper autour de nixpkgs_package (met les options qui vont bien)

nix_c_library

# to debug
bazel -c dbg
bazel --client_debug ...
https://docs.bazel.build/versions/master/command-line-reference.html#flag--client_debug

# '-s' stands for subcommands
bazel -s ...
will have bazel print the run [[commands]]
bazel build --explain=file.txt --verbose_explanations

bazel info shows the server log location.
Our bazel remote is in /tmp/bazel-remote.log


# force a rebuild
Change the environment 
bazel build --action_env="avariable=1" :mytarget
https://stackoverflow.com/questions/59095711/how-to-force-rebuild-a-package-in-bazel-to-measuring-build-time

to force uploading to cache
 --no_remote_accept_cached
--attempt_to_print_relative_paths
--logging entre 0 et 6
 --sandbox_debug

 --execution_log_json_file

bazel dump is cool

To construct :
bazel-bin/simwork/result-store/result-store-service@image-notimestamp-layer.tar

# to override a repository
bazel build/test/run/sync --override_repository rules_haskell=/path/to/checkout


The WORKSPACE file allows users to depend on targets from other parts of the filesystem or downloaded from the internet. It uses the same syntax as BUILD files, but allows a different set of rules called repository rules (sometimes also known as workspace rules).


# To force a re-download:
$ bazel sync

--nofetch
# 
Note that running bazel clean will not actually delete the external directory. To remove all external artifacts, use bazel clean --expunge

bazel shutdown

# for offline builds
run `bazel fetch` beforehand.

--record_rule_instantiation_callstack

%% Targets with tags = ["manual"] will not be included in wildcard target patterns (..., :*, :all, etc.)

bazel query 'kind("source file", deps(//simwork/examples:data_Simple))'

# understand the cache
https://docs.bazel.build/versions/master/command-line-reference.html#flag--disk_cache fait reference au ~/.cache/bazel_disk_cache.
https://docs.bazel.build/versions/3.5.0/output_directories.html
bazel --output_user_root=./user_cache 

