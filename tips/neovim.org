#+TITLE: neovim.org

nvim -V30log.txt to log information

you can start neovim with --luamod-dev
also set vim.g.__ts_debug to help debug language-tree


* load the result of rg --vimgrep in quickfix:

@code.start
rg --vimgrep use-xdg | nvim -q
@code.end
should work but it does not. Use intermediate file.


* debug haskell-tools.nvim

  lua require('haskell-tools').start_or_attach({  tools = { log = { level = vim.log.levels.DEBUG }}})

* dump the full rtp

  i_ctrl-R then `=&rtp` and you are done !

** debug slow situations

   @
:profile start profile.log
:profile func *
:profile file *
" At this point do slow actions
:profile pause
:noautocmd qall!

* How to control plenary plugins log level

plenary.log works as:
  local outfile = string.format("%s/%s.log", vim.api.nvim_call_function("stdpath", { "cache" }), config.plugin)
in ~/.cache/rest.nvim.log for instance
DEBUG_PLENARY="debug"

log only if local p_debug = vim.fn.getenv "DEBUG_PLENARY"

* How to override plugin with a local version ?
  Note to my future self: to override my nix-installed telescope and use the checkout one, I had to:
 
  #+BEGIN_SRC viml
  set rtp^=~/telescope.nvim
  lua require'plenary.reload'.reload_module('telescope')
  lua require('telescope.builtin').vim_options{}
  #+END_SRC
 
 

otherwise I ended up with a code that uses 2 different telescope apparently because of package.loaded
" to debug vimscript, use :mess to display error messages
" :scriptnames to list loaded scripts
" and prefix you command with 'verbose' is a very good way to get info
" like ':verbose map J' to know where it was loaded last

# treesitter
dump ast with
:lua print(vim.treesitter.get_parser(0):parse():root():sexpr())


# How to deal with diffs

" git diff http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/ {{{
" the left window contains the version from the target branch
" the middle window contains the working copy of the file, complete with conflict markers
" the right window contains the version from the merge branch
" }}}




* how to search and replace across files

  #+BEGIN_SRC lua
  print('Test')
  #+END_SRC

`grepprg=rg --vimgrep --no-heading `

Then run `:gr TEXT` to grep, it fills the quickfix
then `cfdo s/X/Y` works !
See https://www.reddit.com/r/neovim/comments/i5iptq/comment/g0vpn8j/?utm_source=reddit&utm_medium=web2x&context=3 for details
http://vimcasts.org/episodes/project-wide-find-and-replace/
