# to start a docker
docker run mattator/dce-dockerfiles:latest 
add --name NAME to give it a memorable name:
docker run --name NAME mattator/dce-dockerfiles:latest 

docker image prune -a

One can use `-e "foo=bar"` to pass additionnal variables.

Pour lister les images et leur nom
docker ps
%% docker container ls

# kill all containers

docker kill $(docker ps -q)


# start the container + get a prompt 

docker exec -it <container name> /bin/bash
(the image must be running)

docker-credentials-pass pour eviter d'avoir le mdp en clair dans $HOME/.docker/config.json

docker ps --no-trunc

Quand le service keeps restarting, look at `docker logs`

docker logs --tail 50 --follow --timestamps jinko_result-store-external_1

docker network ls

docker attach jinko_frontend_1

--sig-proxy

docker inspect jinko_result-store_1

https://docs.docker.com/compose/compose-file/#ports



To use the bridge network use network_mode: https://docs.docker.com/compose/compose-file/#network-mode

Compose relies on network scoped aliases, so if you try to use bridge as an external network it will set those aliases. If you use network_mode, it will disable the built-in aliases, and rely on the aliases made available by the bridge network.

# lister les images locales
docker images -a

pour ensuite les regarder:
`docker image inspect hash`

`docker network connect bridge [container]`
to join the default network that way.

$ docker network rm host / bridge / none
Error response from daemon: host is a pre-defined network and cannot be removed

# How to rebuild and restart a single container ?
`docker-compose up -d --build worker`

# How to stop a single container ?
$ docker-compose rm -f -s -v result-store

# use a preexisting network
https://docs.docker.com/compose/networking/#use-a-pre-existing-network

docker network create

https://www.reddit.com/r/docker/comments/8wlggo/dockercompose_not_picking_up_the_existing_network/
networks:
  external: true
  name: dtaone_net

# to show ocnf
docker-compose config

Well you could use network_mode property in the service. This is mutually exclusive with the networks property though. If you use the network_mode: "host" your service has access to the test network, without explicitly joining.

https://docs.docker.com/compose/environment-variables/#the-env-file
compose > shell environment > .env file > dockerfile > undefined


# Networking
In host mode the container does not get its own IP-address allocated. 
Similarly port mapping is disabled.


# To debug
docker inspect --format "{{json .State.Health }}" f6c181a5692e | jq

