CABAL_HELPER_DEBUG=1


## string <-> Bytestring
BLU.toString   :: BL.ByteString -> String
BLU.fromString :: String -> BL.ByteString
lazyByteString = BLU.fromString "lazyByteString ä ß"

>>= vs >>
>> will discard the returned value
    removeSubflow socket token >>= inspectAnswers >> putStrLn "Finished announcing"

ghc-pkg -f /home/teto/netlink-hs find-module System.Linux.Netlink

pour savoir d'ou le pkg est importe:
	ghc-pkg find-module System.Linux.Netlink

Fun website
https://haskell-code-explorer.mfix.io/package/optparse-applicative-0.14.2.0/show/Options/Applicative/BashCompletion.hs

in ghci :
:show paths

Generate database with:
$ ghc-pkg -v -f /home/teto/netlink-hs  recache


How to configure cabal ?
https://www.haskell.org/cabal/users-guide/installing-packages.html
$ cabal user-config update

see https://wiki.haskell.org/FAQ#How_can_I_get_a_stack_backtrace_when_my_program_throws_an_exception.3F

    -- -fno-warn-unused-imports 
    -- -fforce-recomp  makes it build twice on nixos
    ghc-options: -Wall -fno-warn-unused-binds -fno-warn-unused-matches -threaded -fprof-auto -rtsopts

AWSInfo{..} = RecordWildCards


# How to convert between Text/String/ByteString
import Data.Text.Encoding
https://stackoverflow.com/questions/3232074/what-is-the-best-way-to-convert-string-to-bytestring

# to select only some fields in a record: RecordWildCards
record{..} will bring everything intoScope
A better alternative is (tcpInfo@DiagTcpInfo {} ) 


# acronyms
NT = natural transformation


# Lenses
~. -> view
