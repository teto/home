# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 3, 4 ]
sort_by        = "alphabetical"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
# display information associated with the file on the right side of the file list row.
linemode       = "size"
show_hidden    = true  # toggled with .
show_symlink   = true
# The number of files to keep above and below the cursor when moving through the file list.
scrolloff      = 5

[preview]
tab_size        = 2
max_width       = 600
max_height      = 900
# cache_dir       = ""
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = '${EDITOR:=nvim} "$@"', desc = "$EDITOR", block = true, for = "unix" },
]
open = [
	{ run = 'xdg-open "$1"',                desc = "xdg-open", for = "linux" , block = true },
]
open-external = [
	# todo use gio launch ?
	{ run = 'xdg-open "$1"',                desc = "xdg-open", for = "linux" , block = true },
]
reveal = [
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'unar "$1"', desc = "Extract here" },
]
extract-ouch = [
	{ run = 'ouch d -y "%*"', desc = "Extract here with ouch", for = "windows" },
	{ run = 'ouch d -y "$@"', desc = "Extract here with ouch", for = "unix" }
]

extract_zlib = [
	{ run = 'pigz -dc "$1"', desc = "Extract zlib here" },
	# { run = 'nvim "$1"', desc = "Extract zlib here" },
]
play = [
	{ run = 'mpv "$@"', orphan = true, for = "unix" },
	{ run = 'mpv "%1"', orphan = true, for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]
nix = [

]

[open]
rules = [
   # these are all defaults:{{{
	# { name = "*/", use = [ "edit", "open", "reveal" ] },
	# { mime = "text/*",  use = [ "edit", "reveal" ] },
	# { mime = "image/*", use = [ "open", "reveal" ] },
	# { mime = "video/*", use = [ "play", "reveal" ] },
	# { mime = "audio/*", use = [ "play", "reveal" ] },
	# { mime = "inode/x-empty", use = [ "edit", "reveal" ] },

	# { mime = "application/json", use = [ "edit", "reveal" ] },
	# { mime = "*/javascript",     use = [ "edit", "reveal" ] },

	# { mime = "application/zip",             use = [ "extract", "reveal" ] },
	# { mime = "application/gzip",            use = [ "extract", "reveal" ] },
	# { mime = "application/x-tar",           use = [ "extract", "reveal" ] },
	# { mime = "application/x-bzip",          use = [ "extract", "reveal" ] },
	# { mime = "application/x-bzip2",         use = [ "extract", "reveal" ] },
	# { mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
	# { mime = "application/x-rar",           use = [ "extract", "reveal" ] },
	# { mime = "application/xz",              use = [ "extract", "reveal" ] },
# }}}


	# , "reveal"
	# { mime = "application/octet-stream",     use = [ "extract_zlib" ] },
	# https://yazi-rs.github.io/docs/configuration/yazi/#open
  { name = "*.jsonzlib", use = [ "extract_zlib", "open" ] },
   { mime = "*", use = [ "open", "reveal" ] }

]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]
# https://yazi-rs.github.io/docs/configuration/yazi/#plugin
preloaders = [
	# { name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
	# Image
	{ mime = "image/vnd.djvu", run = "noop" },
	{ mime = "image/*",        run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
]

prepend_previewers = [
  # sync = true
  { name = "*.chunks", run = "chunks" },
  { name = "*.jsonzlib", run = "jsonzlib" },
  { mime = "message/rfc822", run = "code" },
  { mime = "audio/*", run = "zaz" },
  # Archive previewer
  { mime = "application/*zip",            run = "ouch" },
  { mime = "application/x-tar",           run = "ouch" },
  { mime = "application/x-bzip2",         run = "ouch" },
  { mime = "application/x-7z-compressed", run = "ouch" },
  { mime = "application/x-rar",           run = "ouch" },
  { mime = "application/x-xz",            run = "ouch" },
]

# previewers = [
# 	{ name = "*/", run = "folder", sync = true },
# name (String): Glob expression for matching the file name. Case insensitive by default, add \s to the beginning to make it sensitive.
# mime (String): Glob expression for matching the mime-type. Case insensitive by default, add \s to the beginning to make it sensitive.
# run (String): The name of the Lua plugin to be ran.
# sync (Boolean): Whether to run in the sync context, default is false
# append_previewers = [
#   # result of ComputationResults/ScalarArrays-3656b3d2-d682-50b3-92d5-7faf0976bcf5-crossArms.chunks
#   # "run" = name of plugin
#   { name = "*.chunks", run = "chunks", sync = true },
# 	{ mime = "audio/*", run = "zaz" },
# ]

[input]
# cd
# cd_title  = "Change directory:"
# cd_origin = "top-center"
# cd_offset = [ 0, 2, 50, 3 ]

# # create
# create_title  = "Create:"
# create_origin = "top-center"
# create_offset = [ 0, 2, 50, 3 ]

# # rename
# rename_title  = "Rename:"
# rename_origin = "hovered"
# rename_offset = [ 0, 1, 50, 3 ]

# # trash
# trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
# trash_origin	= "top-center"
# trash_offset	= [ 0, 2, 50, 3 ]

# # delete
# delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
# delete_origin	= "top-center"
# delete_offset	= [ 0, 2, 50, 3 ]

# # filter
# filter_title  = "Filter:"
# filter_origin = "top-center"
# filter_offset = [ 0, 2, 50, 3 ]

# # find
# find_title  = [ "Find next:", "Find previous:" ]
# find_origin = "top-center"
# find_offset = [ 0, 2, 50, 3 ]

# # search
# search_title  = "Search via {n}:"
# search_origin = "top-center"
# search_offset = [ 0, 2, 50, 3 ]

# # shell
# shell_title  = [ "Shell:", "Shell (block):" ]
# shell_origin = "top-center"
# shell_offset = [ 0, 2, 50, 3 ]

# # overwrite
# overwrite_title  = "Overwrite an existing file? (y/N)"
# overwrite_origin = "top-center"
# overwrite_offset = [ 0, 2, 50, 3 ]

# # quit
# quit_title  = "{n} task{s} running, sure to quit? (y/N)"
# quit_origin = "top-center"
# quit_offset = [ 0, 2, 50, 3 ]

[select]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false

[log]
enabled = true

[headsup]
