return {
    -- shows a lightbulb where a codeAction is available
    -- { 'kosayoda/nvim-lightbulb',
    -- 	config = function ()
    -- 		vim.cmd [[autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()]]
    -- 	end
    --  },

    -- {
    --  -- CodeActionToggleSigns / CodeActionToggleSigns
    --  'lukas-reineke/lsp-format.nvim',
    --  config = function()
    --   require("lsp-format").setup {}
    --   -- lsp-format attaches itself on o
    --   vim.api.nvim_create_autocmd("LspAttach", {
    --    desc = "Attach lsp-format on new client",
    --    callback = function(args)
    --     if not (args.data and args.data.client_id) then
    --      return
    --     end
    --     -- local client = vim.lsp.get_client_by_id(args.data.client_id)
    --     -- local bufnr = args.buf
    --     -- require("lsp-format").on_attach(client, bufnr)
    --    end
    --   })
    --  end
    -- },

    --  'mfussenegger/nvim-dap'
    -- {
    --	"rcarriga/nvim-dap-ui"
    --	, requires = {"mfussenegger/nvim-dap"}
    -- }
    -- use 'nvim-telescope/telescope-dap.nvim'

    -- {
    --  url = 'https://git.sr.ht/~whynothugo/lsp_lines.nvim',
    --  config = function()
    --   require("lsp_lines").setup()
    --  end
    -- },
    -- { 'j-hui/fidget.nvim',
    -- -- https://github.com/j-hui/fidget.nvim/blob/main/doc/fidget.md
    --  -- tag = "legacy",
    --  config = function ()
    --   require"fidget".setup{
    --    progress = {
    --    ignore_done_already = true,  -- Ignore new tasks that are already complete
    --   },
    --      notification = {
    --        poll_rate = 10,               -- How frequently to update and render notifications
    --        filter = vim.log.levels.INFO, -- Minimum notifications level
    --        override_vim_notify = false,  -- Automatically override vim.notify() with Fidget
    --        configs =                     -- How to configure notification groups when instantiated
    --          { default = require("fidget.notification").default_config },
    --        -- Options related to how notifications are rendered as text
    --        view = {
    --          stack_upwards = true,       -- Display notification items from bottom to top
    --          icon_separator = " ",       -- Separator between group name and icon
    --          group_separator = "---",    -- Separator between notification groups
    --          group_separator_hl =        -- Highlight group used for group separator
    --            "Comment",
    --        },
    --        -- Options related to the notification window and buffer
    --        window = {
    --          normal_hl = "Comment",      -- Base highlight group in the notification window
    --          winblend = 100,             -- Background color opacity in the notification window
    --          border = "none",            -- Border around the notification window
    --          zindex = 45,                -- Stacking priority of the notification window
    --          max_width = 400,              -- Maximum width of the notification window
    --          max_height = 100,             -- Maximum height of the notification window
    --          x_padding = 1,              -- Padding from right edge of window boundary
    --          y_padding = 0,              -- Padding from bottom edge of window boundary
    --          align = "top",        -- Whether to bottom-align the notification window
    --          relative = "editor",        -- What the notification window position is relative to
    --        },
    --      },
    --      -- Options related to logging
    --      logger = {
    --        level = vim.log.levels.WARN,  -- Minimum logging level
    --        float_precision = 0.01,       -- Limit the number of decimals displayed for floats
    --        path =                        -- Where Fidget writes its logs to
    --          string.format("%s/fidget.nvim.log", vim.fn.stdpath("cache")),
    --      },
    --    }
    --
    --  end
    -- }
}
