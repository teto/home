return {
    -- {
    --   -- use 'jk' as Esc . Supposed to be fast but currently an issue
    --   https://github.com/rainbowhxch/accelerated-jk.nvim
    --   'TheBlob42/houdini.nvim',
    --   config = function()
    --       require('houdini').setup()
    --   end
    -- },

    -- to help with preloading fennel for instance
    -- 'gpanders/nvim-moonwalk',

    -- { 'mhartington/formatter.nvim',
    -- config = function ()
    -- -- Utilities for creating configurations
    -- local util = require "formatter.util"

    -- -- Provides the Format, FormatWrite, FormatLock, and FormatWriteLock commands
    -- require("formatter").setup {
    --  -- Enable or disable logging
    --  logging = true,
    --  -- Set the log level
    --  log_level = vim.log.levels.WARN,
    --  -- All formatter configurations are opt-in
    --  filetype = {
    --   nix = {
    --    require("formatter.filetypes.nix").nixpkgs_fmt,
    --   },
    --   ts = {

    --    require("formatter.filetypes.typescript").prettier,
    --   },
    --   py = {
    --      require("formatter.filetypes.python").black,
    --   },
    --    -- Formatter configurations for filetype "lua" go here
    --    -- and will be executed in order
    --    lua = {
    --      -- "formatter.filetypes.lua" defines default configurations for the
    --      -- "lua" filetype
    --      require("formatter.filetypes.lua").stylua,

    --    },

    --    -- Use the special "*" filetype for defining formatter configurations on
    --    -- any filetype
    --    -- ["*"] = {
    --      -- "formatter.filetypes.any" defines default configurations for any
    --      -- filetype
    --      -- require("formatter.filetypes.any").remove_trailing_whitespace
    --    -- }
    --  }
    -- }
    -- end
    -- },

    -- {
    --  'folke/neodev.nvim',
    --  config = function()
    --   -- IMPORTANT: make sure to setup neodev BEFORE lspconfig
    --   require("neodev").setup({
    --    -- add any options here, or leave empty to use the default settings
    --   })
    --  end
    -- },

    -- {
    --  "chrishrb/gx.nvim",
    --  event = { "BufEnter" },
    --  -- dependencies = { "nvim-lua/plenary.nvim" },
    --  -- config = true, -- default settings
    --  -- you can specify also another config if you want
    --  config = function()
    --   require("gx").setup {
    --    -- open_browser_app = "xdg-open",   -- specify your browser app; default for macos is "open" and for linux "xdg-open"
    --    -- handlers = {
    --    --  plugin = true,                     -- open plugin links in lua (e.g. packer, lazy, ..)
    --    --  github = true,                     -- open github issues
    --    --  package_json = true,               -- open dependencies from package.json
    --    -- },
    --   }
    --  end,
    -- },

    -- {
    --  'lukas-reineke/indent-blankline.nvim',
    --  -- main = "ibl",
    --  -- opts =
    --  config = function()
    --   require("ibl").setup({
    --    -- debounce = 200,
    --       whitespace = { highlight = { "Whitespace", "NonText" } },
    --       scope = { exclude = { language = { "lua" } } },
    --   -- require('indent_blankline').setup({
    --    -- exclude = { 'terminal' },
    --    -- blankline_use_treesitter,
    --    enabled = false,
    --   })
    --  end,
    -- },

    -- {
    --   "okuuva/auto-save.nvim", -- fork of pocco81/auto-save.nvim
    --   cmd = "ASToggle", -- optional for lazy loading on command
    --   event = { "FocusLost" }, -- optional for lazy loading on trigger events
    --   },
    -- {
    --  'Pocco81/AutoSave.nvim',       -- :ASToggle /AsOn / AsOff
    --  config = function()
    --   local autosave = require('auto-save')
    --   autosave.setup({
    --    enabled = true,
    --    -- execution_message = "AutoSave: saved at " .. vim.fn.strftime("%H:%M:%S"),
    --    events = { 'FocusLost' },             -- "InsertLeave"
    --    -- conditions = {
    --    -- 	exists = true,
    --    -- 	filetype_is_not = {},
    --    -- 	modifiable = true
    --    -- },
    --    write_all_buffers = false,
    --    -- on_off_commands = true,
    --    -- clean_command_line_interval = 2500
    --   })
    --  end,
    -- },

    -- competition to potamides/pantran.nvim which uses just AI backends it seems
    -- {
    --  'uga-rosa/translate.nvim',
    --  lazy = true,
    --  config = function()
    --   require('translate').setup({
    --    default = {
    --     command = 'translate-shell',
    --    },
    --    preset = {
    --     output = {
    --      split = {
    --       append = true,
    --      },
    --     },
    --    },
    --   })
    --  end,
    -- },
}
