"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[aliases]
# `jj l` shows commits on the working-copy commit's (anonymous) bookmark
# compared to the `main` bookmark
l = ["log", "-r", "(main..@):: | (main..@)-"]

# would like 
# sp = [""]

# git log-like
gl = ["log", "-r", "(..@)::"]
fa = ["git", "fetch", "--all-remotes"]
colocate = ["git", "init", "--colocate"]

# shamefully stolen from https://github.com/jj-vcs/jj/discussions/5568#discussioncomment-12674748
tug = ["bookmark", "move", "--from", "closest_bookmark(@)", "--to", "closest_pushable(@)"]

[revset-aliases]
# TODO override immutable to ignore mine not in trunk
# "immutable_heads()" = "builtin_immutable_heads() | (trunk().. & ~mine())"
# $ jj log -r 'why_immutable(xyz)'
# see https://github.com/jj-vcs/jj/discussions/5669 for more explanation

'why_immutable(r)' = 'r | roots(r:: & immutable_heads())'
"trunk()" = '''
latest(
  remote_bookmarks(exact:"main", exact:"origin") |
  remote_bookmarks(exact:"master", exact:"origin") |
  remote_bookmarks(exact:"trunk", exact:"origin") |
  remote_bookmarks(exact:"main", glob:"up*") |
  remote_bookmarks(exact:"master", glob:"up*") |
  remote_bookmarks(exact:"trunk", glob:"up*") |
  remote_bookmarks(exact:"dev", glob:"up*") |
  root()
)
'''


# used in the tug alias 
# https://github.com/jj-vcs/jj/discussions/5568#discussioncomment-12674748
'closest_bookmark(to)' = 'heads(::to & bookmarks())'
'closest_pushable(to)' = 'heads(::to & ~description(exact:"") & (~empty() | merges()))'


# I overrode revset-aliases.mine() to include both my emails
# Or, rather, I set it to author(exact:'name') | author(exact:'email')

[experimental-advance-branches]
enabled-branches = ["glob:push-*"]
# disabled-branches = ["main", "dev", "master", "glob:push-*"]
#
[ui]
# log
default-command = "status"
# default-description = "\n\nTESTED=TODO"
# Possible values: "color-words" (default), "git", "summary"
# diff.format = "git"
# log-word-wrap = true
# Enable pagination for commands that support it (default)
paginate = "auto"
# Disable all pagination, equivalent to using --no-pager
# paginate = "never"

# The ui.merge-editor key specifies the tool used for three-way merge tools by jj resolve. Use merge-tools.TOOL.merge-args
merge-editor = "nvim"

# The ui.diff-editor setting affects the default tool used for editing diffs (e.g. jj split, jj squash -i)
# Shows a single snapshot and one or more diffs to apply to it
# conflict-marker-style = "diff"
# # Shows a snapshot for each side and base of the conflict
# conflict-marker-style = "snapshot"
# Uses Git's "diff3" conflict markers to support tools that depend on it
# careful because it prevents from using diffconflicts
# conflict-marker-style = "git"

[merge-tools.kdiff3]
# program  = "kdiff3"     # Defaults to the name of the tool if not specified
merge-args = ["$base", "$left", "$right", "-o", "$output", "--auto"]

[merge-tools.meld]
merge-args = ["$left", "$base", "$right", "-o", "$output", "--auto-merge"]

[merge-tools.vimdiff]
merge-args = ["-f", "-d", "$output", "-M",
    "$left", "$base", "$right",
    "-c", "wincmd J", "-c", "set modifiable",
    "-c", "set write"]
program = "vim"
merge-tool-edits-conflict-markers = true

[merge-tools.nvim]
program = "nvim"
merge-args = ["-f", "-d", "$output", "-M",
    "$left", "$base", "$right",
    "-c", "wincmd J", "-c", "set modifiable",
    "-c", "set write"]
merge-tool-edits-conflict-markers = true


# fugitive doesnt work because
# [merge-tools.fugitive]
# program = "nvim"
# merge-args = [ "-f", "-c", "Gdiffsplit!" , "$output"]
#
# [mergetool "fugitive"]
# 	cmd = "nvim -f -c \"Gdiffsplit!\" \"$MERGED\""
#
# [mergetool "vimdiff"]
# 	cmd = "nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'"


[merge-tools.jj-diffconflicts]
# https://github.com/rafikdraoui/jj-diffconflicts
# Careful, works only with native conflict-marker-style
program = "nvim"
merge-args = [
    "-c", "let g:jj_diffconflicts_marker_length=$marker_length",
    "-c", "JJDiffConflicts!", "$output", "$base", "$left", "$right",
]
merge-tool-edits-conflict-markers = true

[colors]
commit_id = "green"
"commit_id prefix" = { bold = true }
"working_copy commit_id" = { underline = true }

[core]
# fsmonitor = "watchman"
# watchman.register_snapshot_trigger = true

[git]
# avoided the '/' because it creates issues with gitlab slugifying for components
push-bookmark-prefix = "matt-push-"

[snapshot]
max-new-file-size = "10MiB"
auto-update-stale = true

# configure the template used when no -T is specified.
[templates]
# Use builtin log template
log = "builtin_log_compact"
# Use builtin op log template
op_log = "builtin_op_log_compact"
# Use builtin show template
show = "builtin_log_detailed"
# Equivalent to `commit.verbose = true` in Git
draft_commit_description =  "commit_description_verbose"


[template-aliases]
bookmark_list_simple = '''(label("bookmark", name)) ++ "\n"'''

# Equivalent to `commit.verbose = true` in Git
commit_description_verbose = '''

concat(
  description,
  "\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''

bookmark_list = '''
if(remote,
  if(tracked,
    "  " ++ separate(" ",
      label("bookmark", "@" ++ remote),
      format_tracked_remote_ref_distances(self),
    ) ++ format_ref_targets(self),
    label("bookmark", name ++ "@" ++ remote) ++ format_ref_targets(self),
  ),
  label("bookmark", name) ++ if(present, format_ref_targets(self), " (deleted)"),
) ++ "\n"
'''

# templates.commit_summary = 'format_commit_summary_with_refs(self, bookmarks)'

# override user.email if the repository is located under ~/oss
# [[--scope]]
# --when.repositories = ["~/nova"]
# [--scope.user]
# email = "YOUR_OSS_EMAIL@novatoto.ai"


# disable pagination for `jj status`, use `delta` for `jj diff` and `jj show`
[[--scope]]
--when.commands = ["status"]
[--scope.ui]
paginate = "never"
[[--scope]]
--when.commands = ["diff", "show"]
[--scope.ui]
pager = "delta"

